local commander = require("commander.commander")

local METRICS_SETTINGS = {
	line_break = true,
	width = sys.get_config_int("display.width", 960)
}
local function text_metrics(self, text)
	return resource.get_text_metrics(self.font, text, METRICS_SETTINGS)
end

local function is_offscreen(node)
	return gui.get_position(node).y - gui.get_size(node).y > 640
end

local CURSOR_BLINK_EASING = vmath.vector({
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
})
local function blink_cursor(self)
	gui.set_alpha(self.cursor_node, 1)
	gui.animate(self.cursor_node, "color.w", 0, CURSOR_BLINK_EASING, 1.3, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
end

local function delete_messages(self, at)
	for i = at, #self.messages do
		gui.delete_node(self.messages[i])
		self.messages[i] = nil
	end
end

local function shift_messages(self, height)
	for i, node in ipairs(self.messages) do
		local pos = gui.get_position(node)
		local new_pos = pos + vmath.vector3(0, height, 0)
		gui.set_position(node, new_pos)

		if is_offscreen(node) then
			delete_messages(self, i)
			break
		end
	end
end

local function new_message(self, text, color)
	local height = text_metrics(self, text).height
	shift_messages(self, height)

	local node = gui.clone(self.message_node)
	gui.set_position(node, vmath.vector3(0, height, 0))
	gui.set_text(node, text)
	gui.set_color(node, color)
	gui.set_size(node, vmath.vector3(960, height, 0))
	gui.set_enabled(node, true)

	table.insert(self.messages, 1, node)
end

local function blank_line(self)
	new_message(self, "ignore me", vmath.vector4())
end

local function update_cursor(self)
	local prompt_text = "> " .. self.input
	prompt_text = prompt_text:sub(1, 2 + self.cursor_index)

	local prompt_width = text_metrics(self, prompt_text:gsub("%s", "_")).width
	gui.animate(self.cursor_node, "position.x", prompt_width, gui.EASING_OUTSINE, 0.05)
end

local function update_prompt(self)
	local prompt_text = "> " .. self.input
	gui.set_text(self.prompt_node, prompt_text)

	update_cursor(self)
end

local function set_input(self, text)
	assert(text, "Text must not be nil!")
	if self.cursor_index == #self.input then
		self.cursor_index = #text
	end
	self.input = text
	update_prompt(self)
	blink_cursor(self)
end

local function insert_text(self, text)
	local new_input = self.input:sub(1, self.cursor_index) .. text .. self.input:sub(self.cursor_index + 1, -1)
	if self.cursor_index < #self.input - 1 then
		self.cursor_index = self.cursor_index + #text
	end
	set_input(self, new_input)
end

local function split(s)
	local matches = {}
	for match in s:gmatch("[^%s]+") do
		table.insert(matches, match)
	end
	return matches
end

function init(self)
	msg.post(".", "acquire_input_focus")

	commander.register_console(msg.url())

	self.shown = true
	self.typing = false
	self.cursor_index = 0
	self.input = ""
	self.message_node = gui.get_node("message")
	self.cursor_node = gui.get_node("cursor")
	self.console_node = gui.get_node("console")
	self.prompt_node = gui.get_node("prompt")
	self.prompt_bg_node = gui.get_node("prompt_bg")
	self.font = gui.get_font_resource(gui.get_font(self.message_node))
	self.messages = {}
	self.history = {}
	self.history_index = 0

	update_prompt(self)
	gui.set_enabled(self.console_node, self.shown)
	new_message(self, "Type 'help' to view all available commands", vmath.vector4(0.12, 0.90, 0.50, 1))
end

local COLORS = {
	[commander.SEVERITY.DEBUG] = vmath.vector4(0.2, 0.6, 0.9, 1),
	[commander.SEVERITY.INFO] = vmath.vector4(1, 1, 1, 1),
	[commander.SEVERITY.WARNING] = vmath.vector4(0.8, 0.8, 0.3, 1),
	[commander.SEVERITY.ERROR] = vmath.vector4(0.9, 0.3, 0.3, 1)
}

function on_message(self, message_id, message, sender)
	if message_id == hash("new_message") then
		local text = message.text
		if message.domain then
			text = message.domain .. ": " .. text
		end
		new_message(self, text, COLORS[message.severity])
	end
end

local function enable_cursor(self, enabled)
	if enabled then
		blink_cursor(self)
	else
		gui.cancel_animation(self.cursor_node, "color.w")
		gui.set_alpha(self.cursor_node, 0)
	end
end

local function toggle_console(self)
	self.shown = not self.shown
	if self.shown then
		gui.animate(self.console_node, "position.y", 0, gui.EASING_OUTSINE, 0.4)
	else
		gui.animate(self.console_node, "position.y", 620, gui.EASING_OUTSINE, 0.4)
	end
end

function on_input(self, action_id, action)
	if action.pressed and not self.typing then
		if action_id == hash("key_grave") then
			toggle_console(self)
		end
	end

	if not self.shown then return end

	if action.pressed and action_id == hash("touch") then
		local mouse_over = gui.pick_node(self.prompt_node, action.x, action.y)
		self.typing = mouse_over
		gui.animate(self.prompt_bg_node, "color.w", self.typing and 0.25 or 0, gui.EASING_INSINE, 0.1)
		enable_cursor(self, self.typing)
	elseif self.typing then
		if action_id == hash("text") then
			insert_text(self, action.text)
		elseif action_id == hash("key_backspace") and (action.pressed or action.repeated) then
			if self.cursor_index > 0 then
				local old_index = self.cursor_index
				self.cursor_index = self.cursor_index - 1
				set_input(self, self.input:sub(1, old_index - 1) .. self.input:sub(old_index + 1))
			end
		elseif action_id == hash("key_enter") and action.pressed then
			local args = split(self.input)
			local command_name = table.remove(args, 1)
			blank_line(self)
			commander.info("> " .. self.input)
			commander.run_command(command_name, args)
			table.insert(self.history, 1, self.input)
			self.history_index = 0
			set_input(self, "")
		elseif action_id == hash("key_up") and action.pressed then
			if #self.history > 0 then
				self.history_index = math.min(self.history_index + 1, #self.history)
				set_input(self, self.history[self.history_index])
			end
		elseif action_id == hash("key_down") and action.pressed then
			self.history_index = math.max(self.history_index - 1, 0)
			set_input(self, self.history[self.history_index] or "")
		elseif action.pressed or action.repeated then
			if action_id == hash("key_left") then
				self.cursor_index = math.max(self.cursor_index - 1, 0)
				update_cursor(self)
				blink_cursor(self)
			elseif action_id == hash("key_right") and self.cursor_index >= 0 then
				self.cursor_index = math.min(self.cursor_index + 1, #self.input)
				update_cursor(self)
				blink_cursor(self)
			end
		end
	end

	return self.typing
end
